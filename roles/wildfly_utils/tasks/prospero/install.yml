---
- name: Check local download archive path
  ansible.builtin.stat:
    path: "{{ lookup('env', 'PWD') }}"
  register: local_path
  delegate_to: localhost

- name: Set download paths
  ansible.builtin.set_fact:
    full_path_to_prospero_archive: "{{ wildfly_prospero_install_dir }}/{{ wildfly_prospero_archive_name }}"
    local_path_to_archive: "{{ local_path.stat.path }}/{{ wildfly_prospero_archive_name }}"

- name: "Check target archive: {{ full_path_to_prospero_archive }}"
  ansible.builtin.stat:
    path: "{{ full_path_to_prospero_archive }}"
  register: archive_path
  become: "{{ wildfly_install_requires_become | default(true) }}"

- name: "Download Prospero to {{ local_path_to_archive }}"
  ansible.builtin.get_url:
    url: "{{ wildfly_prospero_download_url }}"
    dest: "{{ local_path_to_archive }}"
    mode: '0640'
    validate_certs: "{{ wildfly_prospero_download_check_ssl }}"
  delegate_to: localhost
  register: downloaded_archive
  when:
    - not eap_enable is defined or not (eap_enable | bool)

- name: "Download JBoss Installation Manager from RHN to {{ local_path_to_archive }}."
  ansible.builtin.include_role:
    name: eap_install
    tasks_from: install/rhn.yml
  vars:
    eap_archive_filename: jboss-eap-{{ eap_version }}-installation-manager.zip
  when:
    - eap_enable is defined and (eap_enable | bool)

- name: Check downloaded archive
  ansible.builtin.stat:
    path: "{{ local_path_to_archive }}"
  register: local_archive_path
  delegate_to: localhost

- name: Copy archive to target nodes
  ansible.builtin.copy:
    src: "{{ local_path_to_archive }}"
    dest: "{{ full_path_to_prospero_archive }}"
    owner: "{{ wildfly_install.user }}"
    group: "{{ wildfly_install.group }}"
    mode: '0640'
  register: new_version_downloaded
  when:
    - not archive_path.stat.exists
    - local_archive_path.stat is defined
    - local_archive_path.stat.exists
  become: "{{ wildfly_install_requires_become | default(true) }}"

- name: "Read target directory information: {{ wildfly_prospero_install_dir }}"
  ansible.builtin.stat:
    path: "{{ wildfly_prospero_install_dir }}/bin"
  become: "{{ wildfly_install_requires_become | default(true) }}"
  register: path_to_prospero_installation

- name: "Ensure Prospero is installed on target."
  ansible.builtin.unarchive:
    src: "{{ full_path_to_prospero_archive }}"
    dest: "{{ wildfly_prospero_install_dir }}"
    owner: "{{ wildfly_install_user | default(omit) }}"
    group: "{{ wildfly_install_group | default(omit) }}"
    remote_src: True
  become: "{{ wildfly_install_requires_become | default(true) }}"
  when:
    - new_version_downloaded.changed or not path_to_prospero_installation.stat.exists
