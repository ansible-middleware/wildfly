---
- name: Validate credentials
  ansible.builtin.assert:
    that:
      - (rhn_username is defined and eap_enable is defined and eap_enable) or not eap_enable is defined or not eap_enable or wildfly_offline_install or eap_install_use_prospero
      - (rhn_password is defined and eap_enable is defined and eap_enable) or not eap_enable is defined or not eap_enable or wildfly_offline_install or eap_install_use_prospero
    quiet: true
    fail_msg: "Cannot install Red Hat Enterprise Application Platform without RHN credentials. Define rhn_username and rhn_password are defined or set eap_offline_install"

- name: "Validate that {{ wildlfy_version }} matches expected scheme (X.y.z)"
  ansible.builtin.assert:
    that:
      - wildfly_version | regex_search('[0-9]{1}.[0-9]{1}.[0-9]{1}') | length > 0
    quiet: true
    fail_msg: "The provided version for the Java server does not follows the required scheme: {{ wildfly_version }}"

- name: "Validate that archive {{ wildfly_archive_filename }} exists on controller (if install is offline: {{ wildfly_offline_install }})."
  ansible.builtin.assert:
    that:
      - wildfly_version is defined and wildfly_archive_filename_local | default(wildfly_archive_filename) is exists
    quiet: true
    fail_msg: "An offline install was requested, but files are not present on the controller: {{ wildfly_archive_filename }}"
  when:
    - wildfly_offline_install and wildfly_archive_filename_on_controller

- name: "Validate patch version for offline installs"
  ansible.builtin.assert:
    that:
      - eap_patch_version is defined and eap_patch_version | length > 0
    quiet: true
    fail_msg: "An offline install was requested, but eap_patch_version parameter was not defined"
  when:
    - wildfly_offline_install
    - eap_enable is defined and eap_enable
    - eap_apply_cp is defined and eap_apply_cp

- name: "Validate existing additional zipfiles {{ eap_archive_filename }} for offline installs"
  ansible.builtin.assert:
    that:
      - not eap_apply_cp or (eap_patch_version is defined and eap_patch_archive_filename is exists)
      - not eap_elytron_adapter or (eap_elytron_adapter_archive_filename is exists)
    quiet: true
    fail_msg: "An offline install was requested, but files are not present on the controller: {{ eap_patch_archive_filename if eap_apply_cp else '' }} {{ eap_elytron_adapter_archive_filename if eap_elytron_adapter else '' }}"
  when:
    - wildfly_offline_install
    - eap_enable is defined and eap_enable

- name: "Validate node identifier length"
  ansible.builtin.assert:
    that:
      - wildfly_node_id | length <= 23
    quiet: true
    fail_msg: "The node ID in variable wildfly_node_id cannot exceed 23 characters length"
  when:
    - wildfly_node_id is defined

- name: "Ensure environement matches EAP supported configuration."
  ansible.builtin.include_tasks: eap_supported_configuration.yml
  when:
    - eap_version is defined

- name: "Check that required packages list has been provided."
  ansible.builtin.assert:
    that:
      - wildfly_prereqs_packages is defined
    quiet: true
    fail_msg: "Required packages list was not defined"

- name: "Add JDK package {{ wildfly_install.java.package_name }} to packages list"
  ansible.builtin.set_fact:
    wildfly_prereqs_packages: "{{ wildfly_prereqs_packages + [wildfly_install.java.package_name] }}"
  when:
    - wildfly_install.java is defined
    - wildfly_install.java.package_name is defined
    - wildfly_install.java.package_name | length > 0

- name: "Add selinux package {{ wildfly_install.java.package_name }} to packages list"
  ansible.builtin.set_fact:
    wildfly_prereqs_packages: "{{ wildfly_prereqs_packages + ['policycoreutils'] }}"
  when:
    - wildfly_selinux_enabled

- name: "Install required packages ({{ wildfly_prereqs_packages | length }})"
  ansible.builtin.package:
    name: "{{ wildfly_prereqs_packages }}"
    state: present
  become: true
  when:
    - wildfly_prereqs_packages | length > 0
    - not wildfly_install_skip_prereqs is defined
