---
- name: "Ensure required parameters are provided."
  ansible.builtin.assert:
    that:
      - wildfly_user is defined
      - wildfly_group is defined
    quiet: true

- name: "Ensure user {{ wildfly_user }} were created."
  ansible.builtin.user:
    name: "{{ wildfly_user }}"
    state: present
  register: wildfly_user_status
  become: true

- name: "Validate state of user: {{ wildfly_user }}"
  ansible.builtin.assert:
    that:
      - wildfly_user_status is defined
      - wildfly_user_status.changed is defined
      - not wildfly_user_status.changed
      - wildfly_user_status.failed is defined
      - not wildfly_user_status.failed
      - wildfly_user_status.state is defined
      - wildfly_user_status.state == 'present'
    quiet: true
    fail_msg: "User {{ wildfly_user }} was NOT created."

- name: "Ensure group {{ wildfly_group }} were created."
  ansible.builtin.group:
    name: "{{ wildfly_group }}"
    state: present
  register: wildfly_group_status
  become: true

- name: "Validate state of group: {{ wildfly_group }}."
  ansible.builtin.assert:
    that:
      - wildfly_group_status is defined
      - wildfly_group_status.changed is defined
      - not wildfly_group_status.changed
      - wildfly_group_status.failed is defined
      - not wildfly_group_status.failed
      - wildfly_group_status.state is defined
      - wildfly_group_status.state == 'present'
    quiet: true
    fail_msg: "User {{ wildfly_group }} was NOT created."

- name: "Verify server's installation directory"
  ansible.builtin.include_tasks: verify_owner_and_group.yml
  when:
    - not wildfly_validation_skip_installation_directory_check is defined

- name: "Verify that main logfile exists and confirms server is started."
  ansible.builtin.include_tasks: logfile.yml
  vars:
    search_pattern: "{{ wildfly_validation_logfile_server_start_pattern }}"
    path_to_logfile: "{{  wildfly_validation_logfile_path_to_logfile }}"

- name: "Wait for HTTP port {{ wildfly_http_port }} to become available."
  ansible.builtin.wait_for:
    port: "{{ wildfly_http_port }}"
    host: "{{ ansible_nodename | default('localhost') }}"
  when:
    - not wildfly_validation_skip_http_port_wait is defined

- name: "Wait for HTTPS port {{ wildfly_https_port }} to become available."
  ansible.builtin.wait_for:
    port: "{{ wildfly_https_port }}"
    host: "{{ ansible_nodename | default('localhost') }}"
  when:
    - not wildfly_validation_skip_https_port_wait is defined

- name: "Check if HTTP web connector is accessible"
  ansible.builtin.uri:
    url: "http://{{ ansible_nodename | default('localhost') }}:{{ wildfly_http_port }}/"
    status_code: 200
  when:
    - not wildfly_validation_skip_http_web_connector_check is defined

- name: "Check if HTTPS web connector is accessible"
  ansible.builtin.uri:
    url: "https://{{ ansible_nodename | default('localhost') }}:{{ wildfly_https_port }}/"
    status_code: 200
    validate_certs: false
  when:
    - not wildfly_validation_skip_https_web_connector_check is defined

- name: "Verify installation user and group"
  ansible.builtin.include_tasks: verify_owner_and_group.yml
  when:
    - not wildfly_validation_skip_user_and_group_check is defined

- name: "Verify systemd service state."
  ansible.builtin.include_tasks: systemd.yml
  when:
    - wildfly_systemd_unit_enabled is defined and wildfly_systemd_unit_enabled
    - wildfly_service_name
    - not wildfly_validation_skip_systemd_check is defined

- name: "Verify server's internal configuration"
  ansible.builtin.include_tasks: verify_with_cli_queries.yml
  vars:
    validation_query: "{{ item.query }}"
  loop:
    - { query: '/core-service=server-environment:read-attribute(name=start-gracefully)' }
    - { query: '/subsystem=undertow/server=default-server/http-listener=default:read-attribute(name=enabled)' }
  when:
    - not wildfly_validation_skip_internal_config_check is defined

- name: "Verify server's configuration"
  ansible.builtin.include_tasks: verify_with_cli_queries.yml
  vars:
    validation_query: "{{ item.query }}"
    expected_result: "{{ item.expected_result }}"
    expected_result_undefined: "{{ item.expected_result_undefined }}"
  loop: "{{ wildfly_validation_queries }}"
  when:
    - not wildfly_validation_skip_config_check is defined

- name: "Verify JDBC drivers deployment (if any)"
  ansible.builtin.include_tasks: verify_with_cli_queries.yml
  vars:
    validation_query: "/core-service=module-loading:list-resource-loader-paths(module={{ item.name }})"
  loop: "{{ jdbc_drivers }}"
  when:
    - not wildfly_validation_skip_jdbc_drivers_check is defined
    - jdbc_drivers is defined and jdbc_drivers | length > 0
