---
- name: Check installation
  ansible.builtin.assert:
    that:
      - eap_enable is defined and eap_enable
    quiet: true
    fail_msg: "Patching is only available on Red Hat EAP installations."

- name: Set patch directory
  ansible.builtin.set_fact:
    patches_repository: "{{ override_patches_repository | default('/opt') }}"

- name: Set download patch archive path
  ansible.builtin.set_fact:
    patch_archive: "{{ patches_repository }}/{{ eap_patch_archive_filename }}"
    patch_bundle: "{{ eap_patch_archive_filename }}"
    patch_version: "{{ eap_patch_version }}"
  when: eap_patch_version is defined

- name: Check download patch archive path
  ansible.builtin.stat:
    path: "{{ patch_archive }}"
  register: patch_archive_path
  when: eap_patch_version is defined
  become: true

- name: Check local download archive path
  ansible.builtin.stat:
    path: "{{ lookup('env', 'PWD') }}"
  register: local_path
  delegate_to: localhost

- name: "Check local downloaded archive: {{ patch_bundle }}"
  ansible.builtin.stat:
    path: "{{ local_path.stat.path }}/{{ patch_bundle }}"
  register: local_archive_path
  when: eap_patch_version is defined
  delegate_to: localhost

- name: Perform patch download from RHN via JBossNetwork API
  when:
    - eap_enable is defined and eap_enable
    - eap_apply_cp
    - not wildfly_offline_install
  block:
    - name: Retrieve product download using JBossNetwork API
      middleware_automation.common.product_search:
        client_id: "{{ rhn_username }}"
        client_secret: "{{ rhn_password }}"
        product_type: BUGFIX
        product_version: "{{ eap_version | regex_replace('([0-9]+)[.]([0-9]+)[.][0-9]+[.]?([A-Za-z]+)?', '\\1.\\2 \\3') }}"
        product_category: "{{ eap_product_category }}"
      register: rhn_products
      no_log: "{{ omit_rhn_output | default(true) }}"
      delegate_to: localhost
      run_once: true

    - name: Determine patch versions list
      ansible.builtin.set_fact:
        filtered_versions: "{{ rhn_products.results | map(attribute='file_path') | select('match', '^[^/]*/jboss-eap-.*[0-9]*[.][0-9]*[.][0-9]*.*$') | map('regex_replace','[^/]*/jboss-eap-([0-9]*[.][0-9]*[.][0-9]*)-.*','\\1' ) | list | unique }}"
      when: eap_patch_version is not defined or eap_patch_version | length == 0
      delegate_to: localhost
      run_once: true

    - name: Determine latest version
      ansible.builtin.set_fact:
         eap_latest_version: "{{ filtered_versions | middleware_automation.common.version_sort | last }}"
      when: eap_patch_version is not defined or eap_patch_version | length == 0
      delegate_to: localhost
      run_once: true

    - name: Determine install zipfile from search results
      ansible.builtin.set_fact:
        rhn_filtered_products: "{{ rhn_products.results | selectattr('file_path', 'match', '[^/]*/jboss-eap-' + eap_latest_version + '-patch.zip$') }}"
        patch_bundle: "jboss-eap-{{ eap_latest_version }}-patch.zip"
        patch_version: "{{ eap_latest_version }}"
      when: eap_patch_version is not defined or eap_patch_version | length == 0
      delegate_to: localhost
      run_once: true

    - name: "Determine selected patch from supplied version: {{ eap_patch_version }}"
      ansible.builtin.set_fact:
        rhn_filtered_products: "{{ rhn_products.results | selectattr('file_path', 'match', '[^/]*/' + eap_patch_archive_filename + '$') }}"
        patch_bundle: "{{ eap_patch_archive_filename }}"
        patch_version: "{{ eap_patch_version }}"
      when: eap_patch_version is defined
      delegate_to: localhost
      run_once: true

    - name: "Check remote downloaded archive: {{ patches_repository }}/{{ patch_bundle }}"
      ansible.builtin.stat:
        path: "{{ patches_repository }}/{{ patch_bundle }}"
      register: remote_archive_path
      become: true

    - name: Download Red Hat EAP patch
      middleware_automation.common.product_download: # noqa risky-file-permissions delegated, uses controller host user
        client_id: "{{ rhn_username }}"
        client_secret: "{{ rhn_password }}"
        product_id: "{{ (rhn_filtered_products | first).id }}"
        dest: "{{ local_path.stat.path }}/{{ patch_bundle }}"
      no_log: "{{ omit_rhn_output | default(true) }}"
      delegate_to: localhost
      run_once: true
      when:
        - remote_archive_path is defined
        - not remote_archive_path.stat.exists

    - name: Update patch archive path after download
      ansible.builtin.set_fact:
        patch_archive: "{{ patches_repository }}/{{ patch_bundle }}"

- name: Check remote download patch archive path
  ansible.builtin.stat:
    path: "{{ patch_archive }}"
  register: patch_info
  become: true

- name: Copy patch archive to target nodes
  ansible.builtin.copy:
    src: "{{ local_path.stat.path }}/{{ patch_bundle }}"
    dest: "{{ patch_archive }}"
    owner: "{{ wildfly_user }}"
    group: "{{ wildfly_group }}"
    mode: '0640'
    selevel: s0
    serole: object_r
    setype: usr_t
    seuser: system_u
  register: new_version_downloaded
  when:
    - not patch_info.stat.exists
  become: true
  notify: exec_restorecon

- name: "Check patch state"
  ansible.builtin.stat:
    path: "{{ patch_archive }}"
  register: patch_info
  become: true

- name: "Set checksum file path for patch"
  ansible.builtin.set_fact:
    patch_checksum_file: "{{ wildfly_home }}/.applied_patch_checksum_{{ patch_info.stat.checksum }}.txt"
  when:
    - patch_info.stat is defined

- name: "Check {{ patch_checksum_file }} state"
  ansible.builtin.stat:
    path: "{{ patch_checksum_file }}"
  register: last_patch_status
  become: true

- name: Print when patch has been applied already
  ansible.builtin.debug:
    msg: "Patch v{{ patch_version }} (checksum {{ patch_info.stat.checksum }}) has already been applied."
  when:
    - last_patch_status.stat.exists

- name: Perform patching
  when: not last_patch_status.stat.exists
  block:
    - name: "Check service status, start for patching if not running"
      block:
        - name: "Check if management interface is reachable"
          ansible.builtin.wait_for:
            host: "{{ jboss_cli_controller_host }}"
            port: "{{ jboss_cli_controller_port }}"
            timeout: 1
      rescue:
        - name: "Deploy configuration"
          ansible.builtin.copy:
            src: "{{ wildfly_home }}/standalone/configuration/{{ wildfly_config_base }}"
            dest: "{{ wildfly_home }}/standalone/configuration/{{ wildfly_instance_name }}.xml"
            group: "{{ wildfly_group }}"
            owner: "{{ wildfly_user }}"
            mode: '0640'
            remote_src: true
            force: false
            selevel: s0
            serole: object_r
            setype: usr_t
            seuser: system_u
          become: true
          notify: exec_restorecon
        - name: "Start wildfly for patching"
          ansible.builtin.shell: |
            set -o pipefail
            {{ wildfly_home }}/bin/standalone.sh -c {{ wildfly_instance_name }}.xml \
                -Djboss.server.config.dir={{ wildfly_home }}/standalone/configuration/ \
                -Djboss.server.base.dir={{ wildfly_home }}/standalone \
                -Djboss.socket.binding.port-offset={{ wildfly_port_range_offset }}
          environment:
            JAVA_HOME: "/etc/alternatives/jre_{{ wildfly_java_package_name | regex_search('(?<=java-)[0-9.]+') }}"
          changed_when: True
          async: 180
          poll: 0
          register: apply_cp_process
          become: true
          become_user: "{{ wildfly_user }}"
        - name: "Wait for management interface is reachable"
          ansible.builtin.wait_for:
            host: "{{ jboss_cli_controller_host }}"
            port: "{{ jboss_cli_controller_port }}"
            timeout: 60
            delay: 10
            sleep: 5

    - name: "Set apply CP conflict default strategy to default (if not defined): {{ jboss_cli_apply_cp_default_conflict_default }}"
      ansible.builtin.set_fact:
        apply_options: "{{ jboss_cli_apply_cp_default_conflict_default }}"
      when:
        - not apply_options is defined

    - name: "Apply patch {{ patch_archive }} to server installed in {{ wildfly_home }}"
      ansible.builtin.include_tasks: jboss_cli.yml
      vars:
        jboss_home: "{{ wildfly_home }}"
        jboss_cli_query: "'patch apply {{ apply_options }} {{ patch_archive }}'"
        jboss_cli_timeout: 30
        jboss_cli_notify: exec_restorecon
        jboss_cli_changed_when: true

    - name: "Display patching result"
      ansible.builtin.debug:
        msg: "Apply patch operation result: {{ cli_result.stdout | string }}"
      when:
        - eap_apply_cp_verbose is defined
        - cli_result is defined
        - cli_result.stdout is defined

    - name: Set checksum files
      block:
        - name: Set checksum file
          ansible.builtin.copy:
            dest: "{{ patch_checksum_file }}"
            content: "Patch v{{ patch_version }}"
            owner: "{{ wildfly_user }}"
            group: "{{ wildfly_group }}"
            mode: '0640'
            selevel: s0
            serole: object_r
            setype: usr_t
            seuser: system_u
          when:
            - not last_patch_status.stat.exists
          become: true
          notify: exec_restorecon

        - name: Set latest patch file
          ansible.builtin.copy:
            dest: "{{ wildfly_home }}/.latest_applied_patch.txt"
            content: "{{ patch_version }}"
            owner: "{{ wildfly_user }}"
            group: "{{ wildfly_group }}"
            mode: '0640'
            selevel: s0
            serole: object_r
            setype: usr_t
            seuser: system_u
          when:
            - not last_patch_status.stat.exists
          become: true
          notify: exec_restorecon

    - name: "Restart server to ensure patch content is running"
      block:
        - name: "Restart server to ensure patch content is running"
          ansible.builtin.include_tasks: jboss_cli.yml
          vars:
            jboss_home: "{{ wildfly_home }}"
            jboss_cli_query: "'shutdown --restart'"
            jboss_cli_timeout: 20
            jboss_cli_become_user: "{{ wildfly_user }}"
          when:
            - not wildfly_no_restart_after_patch
            - cli_result.rc == 0

        - name: "Wait for management interface is reachable"
          ansible.builtin.wait_for:
            host: "{{ jboss_cli_controller_host }}"
            port: "{{ jboss_cli_controller_port }}"
            timeout: 20
            delay: 10
            sleep: 5

        - name: "Stop service if it was started for patching"
          ansible.builtin.include_tasks: jboss_cli.yml
          vars:
            jboss_home: "{{ wildfly_home }}"
            jboss_cli_query: "'shutdown'"
            jboss_cli_timeout: 30
            jboss_cli_become_user: "{{ wildfly_user }}"
          when:
            - apply_cp_process is defined
            - not eap_no_restart_after_patch
            - cli_result.rc == 0

      rescue:
        - name: "Enable elytron when on jre17"
          ansible.builtin.include_tasks: jboss_cli.yml
          vars:
            jboss_home: "{{ wildfly_home }}"
            jboss_cli_file: "{{ wildfly_home }}/docs/examples/enable-elytron-se17.cli"
            jboss_cli_timeout: 60
            jboss_cli_connect: False
            jboss_cli_extra_param: config
            jboss_cli_extra_param_value: "{{ wildfly_instance_name }}.xml"
            jboss_cli_become_user: "{{ wildfly_user }}"
          when:
            - wildfly_java_package_name | regex_search('(?<=java-)[0-9]+') == '17'
            - patch_version.split('.')[0:2] | join('.') == '7.4'
            - patch_version.split('.')[2] | int >= 7

  rescue:
    - name: "Show resulting output"
      ansible.builtin.debug:
        msg: "{{ cli_result.stdout }}"
      when: cli_result is defined and cli_result.stdout is defined
