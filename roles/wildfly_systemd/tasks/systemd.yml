---
- name: "Escalate privileges (if required) and ensure any changes in config file triggers a restart"
  become: "{{ wildfly_systemd_require_privilege_escalation }}"
  notify: 'Restart Wildfly'
  block:

    - name: "Create basedir {{ basedir }} for instance: {{ wildfly_instance_name }}"
      ansible.builtin.file:
        path: "{{ basedir }}"
        state: directory
        owner: "{{ wildfly_systemd.user }}"
        group: "{{ wildfly_systemd.group }}"
        mode: '0755'
        selevel: s0
        serole: object_r
        setype: usr_t
        seuser: system_u

    - name: "Create deployment directories for instance: {{ wildfly_instance_name }}"
      ansible.builtin.file:
        path: "{{ basedir }}/deployments"
        state: directory
        owner: "{{ wildfly_systemd.user }}"
        group: "{{ wildfly_systemd.group }}"
        mode: '0755'
        selevel: s0
        serole: object_r
        setype: usr_t
        seuser: system_u

    - name: "Deploy custom configuration"
      ansible.builtin.template:
        src: "{{ wildfly_systemd.config_custom }}"
        dest: "{{ wildfly_systemd.home }}/standalone/configuration/"
        group: "{{ wildfly_systemd.group }}"
        owner: "{{ wildfly_systemd.user }}"
        mode: '0640'
        selevel: s0
        serole: object_r
        setype: etc_t
        seuser: system_u
      when: wildfly_systemd.config_custom | length > 0

    - name: "Deploy configuration"
      ansible.builtin.copy:
        src: "{{ wildfly_systemd.home }}/standalone/configuration/{{ wildfly_systemd.config }}"
        dest: "{{ wildfly_systemd.home }}/standalone/configuration/{{ wildfly_instance_name }}.xml"
        group: "{{ wildfly_systemd.group }}"
        owner: "{{ wildfly_systemd.user }}"
        mode: '0640'
        remote_src: true
        force: no
        selevel: s0
        serole: object_r
        setype: usr_t
        seuser: system_u

    - name: Include YAML configuration extension
      ansible.builtin.include_tasks: yml_config.yml
      when: wildfly_enable_yml_config

    - name: Check YAML configuration is disabled
      ansible.builtin.file:
        path: "{{ wildfly_systemd.home }}{{ wildfly_systemd.yml_config.path }}{{ wildfly_systemd.yml_config.file }}"
        state: absent
      when: not wildfly_enable_yml_config

    - name: Determine JAVA_HOME for selected JVM
      ansible.builtin.set_fact:
        rpm_java_home: "/etc/alternatives/jre_{{ wildfly_java_package_name | regex_search('(?<=java-)[0-9.]+') }}"
      when: ansible_os_family == 'RedHat'

    - name: Determine JAVA_HOME for selected JVM # noqa blocked_modules
      ansible.builtin.shell: |
        set -o pipefail
        {{ wildfly_systemd.jvm_version_command[ansible_os_family] }}
      args:
        executable: /bin/bash
      changed_when: False
      register: rpm_java_home_other
      when: not ansible_os_family == 'RedHat'

    - name: "Deploy service instance configuration: {{ wildfly_service_systemd_env_file }}{{ wildfly_systemd_service_config_file_suffix }}"
      ansible.builtin.template:
        src: "{{ wildfly_service_config_file_template }}"
        dest: "{{ wildfly_service_systemd_env_file }}"
        group: root
        owner: root
        mode: '0640'
        selevel: s0
        serole: object_r
        setype: etc_t
        seuser: system_u
      register: daemon_reload_env
      vars:
        wildfly_rpm_java_home: "{{ rpm_java_home if ansible_os_family == 'RedHat' else rpm_java_home_other.stdout }}"
        wildfly_yml_configs_str: "-y={{ wildfly_yml_configs | flatten | map('regex_replace', '.j2$', '') | map('regex_replace', '^', basedir + '/') | list | join(':') }}"

    - name: "Deploy Systemd unit for service: {{ wildfly_service_systemd_file }}"
      ansible.builtin.template:
        src: "{{ wildfly_systemd_service_config_file_template }}"
        dest: "{{ wildfly_service_systemd_file }}"
        group: root
        owner: root
        mode: '0640'
        selevel: s0
        serole: object_r
        setype: systemd_unit_file_t
        seuser: system_u
      register: daemon_reload

    - name: "Perform daemon-reload to ensure the changes are picked up"
      ansible.builtin.systemd:
        daemon_reload: yes
      when:
        - daemon_reload is defined or daemon_reload_env is defined
        - daemon_reload.changed or daemon_reload_env.changed

    - name: "Ensure service is started"
      ansible.builtin.include_tasks: service.yml
      vars:
        instance_state: "started"
