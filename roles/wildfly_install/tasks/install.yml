---
- name: Check arguments
  ansible.builtin.assert:
    that:
      - wildfly_install.download_url is defined
      - wildfly_install.home is defined
      - wildfly_install.archive_name is defined
      - wildfly_install.user is defined
      - wildfly_install.group is defined
    quiet: true

- name: Check local download archive path
  ansible.builtin.stat:
    path: "{{ wildfly_install_download_controller_download_dir | default(lookup('env', 'PWD')) }}"
  register: local_path
  delegate_to: localhost

- name: Set download paths
  ansible.builtin.set_fact:
    full_path_to_archive: "{{ wildfly_install.archive_dir }}/{{ wildfly_install.archive_name }}"
    local_path_to_archive: "{{ local_path.stat.path }}/{{ wildfly_install.archive_name }}"

- name: "Check target archive: {{ full_path_to_archive }}"
  ansible.builtin.stat:
    path: "{{ full_path_to_archive }}"
  register: archive_path
  become: true

- name: "Retrieve archive from website: {{ wildfly_download_baseurl }}"
  ansible.builtin.include_tasks: install/web.yml
  when:
    - eap_enable is not defined or not eap_enable
    - not wildfly_install.rpm is defined
    - not wildfly_offline_install
    - archive_path.stat is defined
    - not archive_path.stat.exists

- name: "Retrieve archive from RHN"
  ansible.builtin.include_tasks: install/rhn.yml
  when:
    - not wildfly_offline_install
    - rhn_username is defined
    - rhn_password is defined
    - eap_enable is defined and eap_enable
    - archive_path.stat is defined
    - not archive_path.stat.exists

- name: "Install server using RPM"
  ansible.builtin.include_tasks: install/rpm.yml
  when:
    - wildfly_install.rpm is defined

- name: Check downloaded archive
  ansible.builtin.stat:
    path: "{{ local_path_to_archive }}"
  register: local_archive_path
  delegate_to: localhost

- name: Copy archive to target nodes
  ansible.builtin.copy:
    src: "{{ local_path_to_archive }}"
    dest: "{{ full_path_to_archive }}"
    owner: "{{ wildfly_install.user }}"
    group: "{{ wildfly_install.group }}"
    mode: '0640'
  register: new_version_downloaded
  when:
    - not archive_path.stat.exists
    - local_archive_path.stat is defined
    - local_archive_path.stat.exists
  become: true

- name: Perform installation
  when:
    - not wildfly_install.rpm is defined
  block:
    - name: "Check target archive: {{ full_path_to_archive }}"
      ansible.builtin.stat:
        path: "{{ full_path_to_archive }}"
      register: is_archive_file_created
      become: true

    - name: "Verify target archive state: {{ full_path_to_archive }}"
      ansible.builtin.assert:
        that:
          - is_archive_file_created is defined and is_archive_file_created.stat is defined
          - is_archive_file_created.stat.exists
        quiet: true
        fail_msg: "Archive file does NOT exist: {{ full_path_to_archive }}"

    - name: "Read target directory information: {{ wildfly_install.home }}"
      ansible.builtin.stat:
        path: "{{ wildfly_install.home }}/bin"
      become: true
      register: path_to_workdir

    - name: "Extract files from {{ full_path_to_archive }} into {{ wildfly_install.workdir }}."
      become: true
      ansible.builtin.unarchive:
        src: "{{ full_path_to_archive }}"
        dest: "{{ wildfly_install.workdir }}"
        owner: "{{ wildfly_install.user }}"
        group: "{{ wildfly_install.group }}"
        remote_src: true
        creates: "{{ wildfly_install.home }}/bin"
        selevel: s0
        serole: object_r
        setype: usr_t
        seuser: system_u
      when:
        - new_version_downloaded.changed or not path_to_workdir.stat.exists
      notify:
        - exec_restorecon

    - name: "Note: decompression was not executed"
      ansible.builtin.debug:
        msg: "{{ wildfly_install.home }} already exists and version unchanged, skipping decompression"
      when:
        - not new_version_downloaded.changed and path_to_workdir.stat.exists

- name: "Read information on server home directory: {{ wildfly_install.home }}"
  ansible.builtin.stat:
    path: "{{ wildfly_install.home }}"
  become: true
  register: is_wfly_home

- name: "Check state of server home directory: {{ wildfly_install.home }}"
  ansible.builtin.assert:
    that:
      - is_wfly_home is defined
      - is_wfly_home.stat is defined
      - is_wfly_home.stat.exists is defined
      - is_wfly_home.stat.exists
    quiet: true
    fail_msg: "Server home directory has not been created: {{ wildfly_install.home }}."

- name: "Deploy custom configuration"
  ansible.builtin.template:
    src: "{{ wildfly_install.config_custom }}"
    dest: "{{ wildfly_install.home }}/standalone/configuration/"
    group: "{{ wildfly_install.group }}"
    owner: "{{ wildfly_install.user }}"
    mode: '0640'
    selevel: s0
    serole: object_r
    setype: usr_t
    seuser: system_u
  become: true
  when: wildfly_install.config_custom | length > 0
  notify:
    - exec_restorecon

- name: "Deploy configuration"
  ansible.builtin.copy:
    src: "{{ wildfly_install.home }}/standalone/configuration/{{ wildfly_install.config }}"
    dest: "{{ wildfly_install.home }}/standalone/configuration/{{ wildfly_instance_name }}.xml"
    group: "{{ wildfly_install.group }}"
    owner: "{{ wildfly_install.user }}"
    mode: '0640'
    remote_src: true
    force: "{{ wildfly_install_force_reinstall_config_base }}"
    selevel: s0
    serole: object_r
    setype: usr_t
    seuser: system_u
  become: true
  notify:
    - exec_restorecon

- name: "Apply latest cumulative patch"
  when:
    - eap_apply_cp is defined and (eap_apply_cp | bool )
    - eap_enable is defined and (eap_enable | bool )
  ansible.builtin.include_role:
    name: wildfly_utils
    tasks_from: apply_cp.yml

- name: "Install EAP elytron adapter"
  when:
    - eap_elytron_adapter is defined and eap_elytron_adapter
    - eap_enable is defined and eap_enable
  block:
    - name: "Ensure required parameters for elytron adapter are provided."
      ansible.builtin.assert:
        that:
          - eap_elytron_adapter_version is defined
        quiet: "Missing required parameters for elytron adapter"

    - name: "Install elytron adapter"
      ansible.builtin.include_role:
        name: wildfly_utils
        tasks_from: keycloak_adapter.yml
